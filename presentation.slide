Golang Workshop
30 Julio 2016

Alejandro Arnaud (Gyga)
Ing. InformÃ¡tica
@nogenerics

* Type declarations

type [name] [specification]

- Custom types can be constructed based on built-in types (primitive or composite)
- Examples:

    // Celsius represent temperature in celsius (a float64 type)
    type Celsius float64

    // Names represent an array of strings with length as 5
    type Names [5]string

- Function can be bound to types - methods

* Structs

- A *struct* is a collection of fields.
- Struct fields are accessed using a dot.

.play code/struct1.go /START OMIT/,/END OMIT/

* Structs ...

- Person is a _struct_ type

    type Person struct {
        Name string
        Age  int
    }

* Arrays

- an ordered container type with a fixed number of data
- the arrays are the foundation for slices
- use slice instead of an array
- number of values in the array is called it's length
- An array's length is part of its type, so arrays cannot be re-sized.
- The type *[n]T* is an array of n values of type T

    colors := [3]string{"Red", "Green", "Blue"}
    heights := [4]int{153, 146, 167, 170}

* Arrays ...

- if the length is different for two arrays, those are distinct incompatible types
- The built-in *len* function gives the length of array.
- Array values can be accessed using the index syntax
- The expression *s[n]* accesses the nth element, starting from zero.

    colors := [3]string{"Red", "Green", "Blue"}
    i := colors[1]
    fmt.Println(i)

* Slices

    []int, []struct{ Name string }

- A slice points to an array of values and also includes a length.
- *[]T* is a slice with elements of type T
- *len(s)* returns the length of slice s
- The length of slice can vary dynamically.
- number of values in the slice is called it's length

* Slices ...

- Slices can contain any type, including other slices

    colors := []string{"Red", "Green", "Blue"}
    heights := []int{153, 146, 167, 170}

* Slices ...

- Slice values can be accessed using the index syntax
- The expression *s[n]* accesses the nth element, starting from zero.

    colors := []string{"Red", "Green", "Blue"}
    i := colors[1]
    fmt.Println(i)

- [[http://blog.golang.org/go-slices-usage-and-internals]]
- [[https://blog.golang.org/slices]]

* Maps

- A *map* maps keys to values

.play code/maps1.go /START OMIT/,/END OMIT/

- [[https://blog.golang.org/go-maps-in-action]]

* Maps ...

- Maps can be initialized with *make* before use

.play code/maps2.go /START OMIT/,/END OMIT/

- the *nil* map is empty and cannot be assigned to

* Function declarations

func [name] ([params]) [return value]
func [name] ([params]) ([return values])

A function to return sum of two _int_ values:

.play code/functiondeclaration1.go /START OMIT/,/END OMIT/

* Function declarations ...

A function with multiple returned values:

.play code/functiondeclaration2.go /START OMIT/,/END OMIT/

* Function declarations ...

Made clearer by naming the return values:

.play code/functiondeclaration3.go /START OMIT/,/END OMIT/

* Range Loops

- The _range_ form of the _for_ loop iterates over a slice or map.

.play code/range1.go /START OMIT/,/END OMIT/

When ranging over a slice, two values are returned for each iteration.

- The first is the index, and the second is a copy of the element at that index.

* Range with Maps

.play code/range2.go /START OMIT/,/END OMIT/

* Method declaration

- Method is a function bound to a type (receiver)

    func ([receiver]) [name] ([params]) ([return values])

- A receiver could be any type with a name

* Method declaration ...

- Method bound to a struct:

    type Person struct {
        Name string
        Age  int
    }

    func (p Person) Major() bool {
        return p.Age >= 18
    }

* Method declaration ...

- Method bound to a custom type named Celsius (float64):

    // Celsius represent temperature in celsius (a float64 type)
    type Celsius float64

    func (c Celsius) Freezing() bool {
        return c <= 0
    }

* Method declaration ...

- Constraint: Methods can be defined only on types declared in the same package.

    // This won't compile
    func (s string) Length() int { return len(s) }

(*Exercise*: 4)

* Pointers

- A pointer holds the memory address of a variable.
- The type *T is a pointer to a T value. Its zero value is _nil_.

    var i *int
    var p *Person

- The & operator generates a pointer to its operand.

    i := 42
    p = &i

* Pointers ...

- The * operator denotes the pointer's underlying value.

    fmt.Println(*p) // read i through the pointer p
    *p = 21         // set i through the pointer p

- This is known as "dereferencing" or "indirecting".

* Pointers ...

- Unlike C, Go has no pointer arithmetic.
- No pointer arithmetic, no pointers to unsafe memory.

    a := "hello"
    p := &a
    p += 4  // no, you can't

* Pointers ...

.play code/pointer1.go /START OMIT/,/END OMIT/

* Pointers ...

Why pass by reference instead of pass by value?

- Modify the receiver ("read/write" vs "read")
- Very large struct and a deep copy is expensive
- Consistency: Let all methods have pointer receivers

* Pointers ...

- Control what you pass to functions.
- passing values, no side-effects:

    func double(x int) {
        x *= 2
    }

- passing pointers: side-effects possible:

    func double(x *int) {
        *x *= 2
    }

* Interface

- Interfaces provide a way to specify the behavior of an object
- A type can implement multiple interfaces
- Named collections of method signatures

    type Geometry interface {
        Area() float64
        Perimeter() float64
    }

* Interface ...

- An interface type is defined by a set of methods
- A value of interface type can hold any value that implements those methods
- Interfaces are satisfied implicitly
- A type implements an interface by implementing the methods.

* Interface ...

.play code/interface1.go /START OMIT/,/END OMIT/

(*Exercise*: 5)

* Concurrency

- Goroutines are lightweight threads managed by the Go runtime
- Calling a function with _go_ keyword starts the goroutine

.play code/concurrency1.go /START OMIT/,/END OMIT/

- Goroutines can communicate to each other via channels (typed conduit)

* Concurrency ...

- You can send and receive values with the channel operator: <-

    ch <- v    // Send v to channel ch.
    v := <-ch  // Receive from ch, and
               // assign value to v.

- The data flows in the direction of the arrow.
- Channels must be created before use:

    ch := make(chan int)

- Sends and receives block until the other side is ready
- zero value for channel is _nil_

* Concurrency ...


.play code/concurrency2.go /START OMIT/,/END OMIT/

(*Exercise*: 6)

* Concurrency ...

.play code/concurrency3.go /START OMIT/,/END OMIT/

* WaitGroup

- _sync.WaitGroup_ provides a goroutine synchronization mechanism in Golang
- A WaitGroup waits for a collection of goroutines to finish
- _sync.WaitGroup_ provides 3 methods: Add, Done and Wait.
- _Add_ method is used to identify how many goroutines need to be waited
- When a goroutine exits, it must call _Done_
- The main goroutine blocks on _Wait_

* WaitGroup ...

.play code/concurrency5.go /START OMIT/,/END OMIT/

* WaitGroup ...

.play code/concurrency4.go /START OMIT/,/END OMIT/

(*Exercise*: 7)
